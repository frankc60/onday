/**
 * onday v.2.4.42
 * Â©2020 ISC
 * frankc60@gmail.com 
 * git+https://github.com/frankc60/onday.git
 * Build time: 25-Nov-2020 21:36:29
 */
const t=require("http");class onday{static _PRV_NOW_MONTH=(new Date).getMonth()+1;static _PRV_NOW_DAY=(new Date).getDate();static _init=(t,e)=>"number"==typeof t&&null!=typeof t?"day"==e?t<33&&t>0?t:onday._PRV_NOW_DAY:t>0&&t<13?t:onday._PRV_NOW_MONTH:null;constructor(t,e){this.d=onday._init(t,"day"),this.m=onday._init(e,"month"),this._d=0,this.months={1:"Jan",2:"Feb",3:"Mar",4:"Apr",5:"May",6:"Jun",7:"Jul",8:"Aug",9:"Sep",10:"Oct",11:"Nov",12:"Dec"}}doy(t=onday._PRV_NOW_DAY,e=onday._PRV_NOW_MONTH){return new Promise((async(r,n)=>{try{const n=new Date,a=new Date(n.getFullYear(),e-1,t,1,0,1,0);let o=await Math.ceil((a-new Date(a.getFullYear(),0,1))/864e5);r({date:a,result:o})}catch(t){n(`Error 3: ${t}`)}}))}workoutdate(t=this.d,e=this.m){return new Promise(((r,n)=>{try{console.log("workoutdate for d,m"+t+","+e),(t=onday._init(t,"day"))&&(e=onday._init(e,"month"))||n(`2Error: invalid date values (${t}, ${e})`);const a=new Date,o=new Date(a.getFullYear(),e-1,t);r(`passed in (${t}, ${e}) ${a.getFullYear()} = ${o}, ${this.months[e-1]}`)}catch(t){n(t)}}))}check(e=this.d,r=this.m){return new Promise(((n,a)=>{(e=onday._init(e,"day"))&&(r=onday._init(r,"month"))||a(`Error: invalid date values (${e}, ${r})`),t.get(`http://numbersapi.com/${r}/${e}/date`,(t=>{let e="";t.on("data",(t=>{e+=t})),t.on("end",(()=>{/title\>Error/.test(e)?a(`Error 3:  eee ddd
              xxxxx
              bbbbb
              fff ${e}`):n(e)})),t.on("error",(t=>{a("Error 1:  "+t)}))})).on("error",(t=>{a("Error 2: "+t.message)}))}))}}module.exports=onday;
